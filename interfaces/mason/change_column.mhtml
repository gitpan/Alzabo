<%args>
$schema
$table
$column
$type
$nullable => 0
$default => undef
$length => undef
$precision => undef
$primary_key => 0
$sequenced => 0
@old_attributes => ()
@attributes => ()
</%args>

<%init>
use Alzabo::Config;

my ($s, $t, $c);
eval
{
    $s = Alzabo::Create::Schema->load_from_file( name => $schema );

    $t = $s->table($table);

    $c = $t->column($column);

    $length = undef if $length eq '';
    $precision = undef if $precision eq '';
    $default = undef if $default eq '';

    foreach ( qw( nullable sequenced ) )
    {
	my $m = "set_$_";
	if ($ARGS{$_})
	{
	    unless ($c->$_())
	    {
		$c->$m(1);
	    }
	}
	elsif ($c->$_())
	{
	    $c->$m(0);
	}
    }

    if (defined $default)
    {
	$c->set_default($default);
    }
    elsif (defined $c->default)
    {
	$c->set_default(undef);
    }

    if ( defined $length || defined $precision )
    {
	$c->set_length( length => $length,
			precision => $precision );
    }

    if ($primary_key)
    {
	unless ($c->is_primary_key)
	{
	    $t->add_primary_key($c);
	}
    }
    elsif ($c->is_primary_key)
    {
	$t->delete_primary_key($c);
    }

    $c->set_type($type) if $type ne $c->type;

    @attributes = grep {$_} @attributes;
    foreach my $a (@attributes)
    {
	$c->add_attribute($a) unless grep {$a eq $_} @old_attributes;
    }

    foreach my $a (@old_attributes)
    {
	$c->delete_attribute($a) unless grep {$a eq $_} @attributes;
    }

    $s->save_to_file;
};

$m->comp( '../common/exception', $@ ) if $@;

$m->comp( '../common/redirect', url => 'view_column' . Alzabo::Config::mason_extension() . '?schema=' . $s->name . '&table=' . $t->name . '&column=' . $c->name );
</%init>

<%flags>
inherit => undef
</%flags>
