<%args>
$schema
$table
$column
$type
$null => 0
$primary_key => 0
$sequenced => 0
@old_attributes => ()
@attributes => ()
</%args>

<%init>
use Alzabo::Config;

my ($s, $t, $c);
eval
{
    $s = Alzabo::Create::Schema->load_from_file( name => $schema );

    $t = $s->table($table);

    $c = $t->column($column);

    if ($null)
    {
	unless ($c->null)
	{
	    $c->set_null(1);
	}
    }
    elsif ($c->null)
    {
	$c->set_null(0);
    }

    if ($primary_key)
    {
	unless ($t->column_is_primary_key($c))
	{
	    $t->add_primary_key($c);
	}
    }
    elsif ($t->column_is_primary_key($c))
    {
	$t->delete_primary_key($c);
    }

    if ($sequenced)
    {
	unless ($c->sequenced)
	{
	    $c->set_sequenced(1);
	}
    }
    elsif ($c->sequenced)
    {
	$c->set_sequenced(0);
    }

    $c->set_type($type) if $type ne $c->type;

    @attributes = grep {$_} @attributes;
    foreach my $a (@attributes)
    {
	$c->add_attribute($a) unless grep {$a eq $_} @old_attributes;
    }

    foreach my $a (@old_attributes)
    {
	$c->delete_attribute($a) unless grep {$a eq $_} @attributes;
    }

    $s->save_to_file;
};

$m->comp( &Alzabo::Config::mason_url_path . '/common/exception', $@ ) if $@;

$m->comp( &Alzabo::Config::mason_url_path . '/common/redirect', url => 'view_column' . Alzabo::Config::mason_extension() . '?schema=' . $s->name . '&table=' . $t->name . '&column=' . $c->name );
</%init>

<%flags>
inherit => undef
</%flags>
